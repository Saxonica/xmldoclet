plugins {
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'com.github.gmazzo.buildconfig' version "4.1.2"
}

import java.text.DateFormat
import java.text.SimpleDateFormat

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  xmlDoclet.extendsFrom implementation
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  api 'nu.validator.htmlparser:htmlparser:1.4'
  api 'net.sf.saxon:Saxon-HE:12.3'

  implementation 'net.sf.saxon:Saxon-HE:12.3'
  implementation 'com.github.javaparser:javaparser-core:3.25.4'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

tasks.named('test') {
  useJUnitPlatform()
}

// ============================================================

public String dateTime() {
  TimeZone tz = TimeZone.getTimeZone("UTC");
  DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
  df.setTimeZone(tz);
  return df.format(new Date());
}

public String gitHash() {
  def hashout = new ByteArrayOutputStream()
  exec {
    commandLine "git", "log", "-1", "--format=%h"
    standardOutput = hashout
  }
  return hashout.toString().trim()
}

buildConfig {
  packageName('com.saxonica.xmldoclet')
  buildConfigField('String', 'TITLE', "\"${docletTitle}\"")
  buildConfigField('String', 'VERSION', "\"${docletVersion}\"")
  buildConfigField('String', 'SCHEMA_VERSION', "\"${schemaVersion}\"")
  buildConfigField('String', 'PUB_DATE', "\"${dateTime()}\"")
  buildConfigField('String', 'PUB_HASH', "\"${gitHash()}\"")
}

// ============================================================

tasks.register('xmljavadoc', Javadoc) {
  group = "documentation"
  classpath = configurations.xmlDoclet
  source = sourceSets.main.allJava
  destinationDir = file("${buildDir}/xmldoc")
  options.doclet = 'com.saxonica.xmldoclet.XmlDoclet'
  options.docletpath = configurations.xmlDoclet.files.asType(List) + file("${buildDir}/classes/java/main")
  options.addStringOption("sourcepath", sourceSets.main.java.srcDirs.join(System.getProperty('path.separator')))
}

// ============================================================

task dist(dependsOn: ["jar", "test"]) {
  doLast {
    mkdir "${buildDir}/stage"
    mkdir "${buildDir}/stage/docs"
  }
  doLast {
    copy {
      from "${buildDir}/libs"
      into "${buildDir}/stage"
    }
  }
  doLast {
    copy {
      from "${projectDir}/../README.md"
      into "${buildDir}/stage/docs"
    }
  }
}

task zipDist(type: Zip) {
  from "${buildDir}/stage"
  into "${docletName}-${docletVersion}"
  archiveFileName = "${docletName}-${docletVersion}.zip"
}
dist.finalizedBy zipDist

// ============================================================

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

signing {
  sign publishing.publications
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = docletTitle
        packaging = 'jar'
        description = 'An XML JavaDoc doclet'
        url = 'https://github.com/saxonica/xmldoclet'

        scm {
          url = 'scm:git@github.com:saxonica/xmldoclet.git'
          connection = 'scm:git@github.com:saxonica/xmldoclet.git'
          developerConnection = 'scm:git@github.com:saxonica/xmldoclet.git'
        }

        licenses {
          license {
            name = 'Mozilla Public License Version 2.0'
            url = 'http://www.mozilla.org/MPL/2.0/'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'ndw'
            name = 'Norman Walsh'
          }
        }
      }

      groupId = "com.saxonica"
      artifactId = docletName
      version = docletVersion
      from components.java
      artifact javadocJar
      artifact sourcesJar
    }
  }

  repositories {
    if (project.findProperty("mavenLocalPublish") != null) {
      println("Publish to ${project.findProperty("mavenLocalPublish")}")
      maven {
        url = project.findProperty("mavenLocalPublish")
      }
    } else {
      maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/saxonica/xmldoclet"
        credentials {
          username = project.findProperty("pubauthor") ?: "NOUSER"
          password = project.findProperty("pubtoken") ?: "NOPASS"
        }
      }
    }
  }
}

// ============================================================

task helloWorld() {
  doLast {
    println(sourceSets.main.java.srcDirs.join(System.getProperty('path.separator')))
    println(sourceSets.main.allJava.classesDirectory)
  }
}
